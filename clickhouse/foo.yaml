---
# Source: clickhouse/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: clickhouse-config
  labels:
    app: clickhouse-config
data:
  zookeeper.xml: |-
    <yandex>
      <zookeeper incl="zookeeper-servers">
      
        <node>
            <host>zk-0.zk.default.svc.cluster.local</host>
            <port>2181</port>
        </node>
      
        <node>
            <host>zk-1.zk.default.svc.cluster.local</host>
            <port>2181</port>
        </node>
      
      </zookeeper>
    </yandex>
---
# Source: clickhouse/templates/client.yaml
apiVersion: v1
kind: Service
metadata:
  name: clickhouse-client
  labels:
    name: clickhouse-client
spec:
  clusterIP: None
  selector:
    app: clickhouse-client
---
# Source: clickhouse/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clickhouse
  labels:
    app: clickhouse
spec:
  type: ClusterIP
  ports:
  - port: 9000
    name: rpc
  - port: 8123
    name: rest
  - port: 9009
    name: interserver
  clusterIP: None
  selector:
    app: clickhouse
---
# Source: clickhouse/templates/zookeeper.yaml
apiVersion: v1
kind: Service
metadata:
  name: zk
spec:
  type: ClusterIP
  ports:
  - port: 2888
    name: server
  - port: 3888
    name: leader-election
  clusterIP: None
  selector:
    app: zk
---
# Source: clickhouse/templates/client.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clickhouse-client
spec:
  replicas: 1
  selector:
    matchLabels:
      app: clickhouse-client
  template:
    metadata:
      labels:
        app: clickhouse-client
    spec:
      containers:
        - name: clickhouse-client
          image: yandex/clickhouse-client:latest
          command: ["sleep"]
          args: ["infinity"]
          resources:
            limits:
              cpu: 25m
              memory: 64Mi
            requests:
              cpu: 25m
              memory: 64Mi
---
# Source: clickhouse/templates/zookeeper.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zk
spec:
  serviceName: zk
  replicas: 2
  selector:
    matchLabels:
      app: zk
  template:
    metadata:
      labels:
        app: zk
      annotations:
        pod.alpha.kubernetes.io/initialized: "true"
    spec:
      containers:
      - name: k8szk
        imagePullPolicy: Always
        image: "gcr.io/google_samples/k8szk:v1"
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: server
        - containerPort: 3888
          name: leader-election
        env:
        - name : ZK_ENSEMBLE
          value: "zk-0;zk-1;"
        - name : ZK_HEAP_SIZE
          value: "512M"
        - name : ZK_TICK_TIME
          value: "2000"
        - name : ZK_INIT_LIMIT
          value: "10"
        - name : ZK_SYNC_LIMIT
          value: "5"
        - name : ZK_MAX_CLIENT_CNXNS
          value: "60"
        - name: ZK_SNAP_RETAIN_COUNT
          value: "30"
        - name: ZK_PURGE_INTERVAL
          value: "1"
        - name: ZK_CLIENT_PORT
          value: "2181"
        - name: ZK_SERVER_PORT
          value: "2888"
        - name: ZK_ELECTION_PORT
          value: "3888"
        command:
        - sh
        - -c
        - zkGenConfig.sh && zkServer.sh start-foreground
        readinessProbe:
          exec:
            command:
            - "zkOk.sh"
          initialDelaySeconds: 15
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command:
            - "zkOk.sh"
          initialDelaySeconds: 15
          timeoutSeconds: 5
        volumeMounts:
        - name: zookeeper-data
          mountPath: /var/lib/zookeeper
        resources:
            limits:
              cpu: 125m
              memory: 256Mi
            requests:
              cpu: 125m
              memory: 256Mi
      securityContext:
        runAsUser: 1000
        fsGroup: 1000

  volumeClaimTemplates:
  - metadata:
      name: zookeeper-data
    spec:
      accessModes:
        - "ReadWriteOnce"
      resources:
        requests:
          storage: 1Gi
